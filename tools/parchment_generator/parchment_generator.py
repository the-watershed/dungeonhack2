import tkinter as tk
from tkinter import colorchooser, ttk
from PIL import Image, ImageDraw
import numpy as np
import noise
import random
import os

# Initialize global variables for colors
color1 = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
color2 = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
color1_hex = f'#{color1[0]:02x}{color1[1]:02x}{color1[2]:02x}'
color2_hex = f'#{color2[0]:02x}{color2[1]:02x}{color2[2]:02x}'

# Function to create parchment effect
def create_parchment(color1, color2, resolution):
    global combined
    width, height = resolution
    # Create a solid bottom layer with the second color
    bottom_layer = Image.new('RGB', (width, height), color2)
    
    # Create a cloud layer with the first color using Perlin noise
    cloud_layer = np.zeros((height, width, 4), dtype=np.uint8)
    scale = 100.0  # Adjust scale for fluffiness
    for y in range(height):
        for x in range(width):
            n = noise.pnoise2(x / scale, y / scale, octaves=6, persistence=0.5, lacunarity=2.0, repeatx=width, repeaty=height, base=42)
            n = int((n + 1) / 2 * 255)  # Normalize to 0-255
            for i in range(3):
                cloud_layer[y, x, i] = int(color1[i] * (n / 255))
            cloud_layer[y, x, 3] = n  # Set alpha channel based on noise value

    cloud_layer = Image.fromarray(cloud_layer, 'RGBA')
    
    # Combine the layers
    combined = Image.alpha_composite(bottom_layer.convert("RGBA"), cloud_layer)
    combined.show()

# Function to save the generated image and close the program
def save_image():
    global combined
    if combined:
        combined.save("parch.png")
        print("Image saved as parch.png")
        root.quit()  # Close the program

# Function to handle the generate button click
def generate_parchment():
    resolution = resolution_var.get()
    resolution_map = {
        "HD (1280x720)": (1280, 720),
        "Full HD (1920x1080)": (1920, 1080),
        "2K (2560x1440)": (2560, 1440),
        "4K UHD (3840x2160)": (3840, 2160)
    }
    create_parchment(color1, color2, resolution_map[resolution])

# Function to update color boxes
def update_color_boxes():
    color1_box.config(bg=color1_hex)
    color2_box.config(bg=color2_hex)

# Function to handle the pick colors button click
def pick_colors():
    global color1, color2, color1_hex, color2_hex
    color1 = colorchooser.askcolor(title="Choose First Color")[0]
    color1_hex = f'#{int(color1[0]):02x}{int(color1[1]):02x}{int(color1[2]):02x}'
    color2 = colorchooser.askcolor(title="Choose Second Color")[0]
    color2_hex = f'#{int(color2[0]):02x}{int(color2[1]):02x}{int(color2[2]):02x}'
    update_color_boxes()

# Create the main window
root = tk.Tk()
root.title("Parchment Generator")
root.geometry("200x500")

# Create and place the resolution dropdown menu
resolution_var = tk.StringVar(value="HD (1280x720)")
resolution_label = tk.Label(root, text="Select Resolution:")
resolution_label.pack(pady=5)
resolution_menu = ttk.Combobox(root, textvariable=resolution_var)
resolution_menu['values'] = ["HD (1280x720)", "Full HD (1920x1080)", "2K (2560x1440)", "4K UHD (3840x2160)"]
resolution_menu.pack(pady=5)

# Create and place the color boxes
color1_box = tk.Label(root, bg=color1_hex, width=20, height=2)
color1_box.pack(pady=5)
color2_box = tk.Label(root, bg=color2_hex, width=20, height=2)
color2_box.pack(pady=5)

# Create and place the pick colors button
pick_colors_button = tk.Button(root, text="Pick Colors", command=pick_colors)
pick_colors_button.pack(pady=5)

# Create and place the generate button
generate_button = tk.Button(root, text="Generate Parchment", command=generate_parchment)
generate_button.pack(pady=20)

# Create and place the save button
save_button = tk.Button(root, text="Save Image", command=save_image)
save_button.pack(pady=5)

# Run the application
root.mainloop()

# Generated by Copilot