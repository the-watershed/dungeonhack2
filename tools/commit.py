import subprocess
import sys
import tkinter as tk
from tkinter import simpledialog

def run_command(command):
    """
    Executes a shell command and captures its output.

    Parameters:
    command (str): The command to be executed.

    Returns:
    str: The standard output from the command execution.

    Raises:
    SystemExit: If the command returns a non-zero exit code, the program will exit with the same code.
    """
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Error: {result.stderr}")
        sys.exit(result.returncode)
    return result.stdout

def get_commit_message():
    """
    Opens a pop-up window to prompt the user for a commit message.

    Returns:
    str: The commit message entered by the user.
    """
    root = tk.Tk()
    root.withdraw()  # Hide the root window
    commit_message = simpledialog.askstring("Commit Message", "Enter commit message:")
    root.destroy()  # Destroy the root window
    return commit_message

def main():
    """
    Main function to handle the git commit process.

    This function performs the following steps:
    1. Prompts the user to enter a commit message via a pop-up window.
    2. Adds all changes in the root of the project folder to the staging area.
    3. Commits the changes with the provided commit message.
    4. Pushes the committed changes to the remote repository.
    5. Prints a success message upon completion.
    """
    commit_message = get_commit_message()

    # Add all changes in the root of the project folder
    print("Adding changes...")
    run_command("git add .")

    # Commit changes with the provided commit message
    print("Committing changes...")
    run_command(f'git commit -m "{commit_message}"')

    # Push changes to the remote repository
    print("Pushing changes...")
    run_command("git push")

    print("Changes committed and pushed successfully.")

if __name__ == "__main__":
    main()

# Generated by Copilot